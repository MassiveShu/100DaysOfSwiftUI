import CoreML
import SwiftUI

struct ContentView: View {
    @State private var wakeUp = defaultWakeTime
    @State private var sleepAmount = 8.0
    @State private var coffeeAmount = 1
    
    @State private var alertTitle = ""
    @State private var alertMessage = ""
    @State private var showingAlert = false
    
    var coffeeCups = [1, 2, 3, 4, 5, 6, 7, 8]
    
    static var defaultWakeTime: Date {
    var components = DateComponents()
    components.hour = 7
    components.minute = 0
        return Calendar.current.date(from: components) ?? Date.now
    }
    
    
    var body: some View {
        NavigationView {
            Form {
                Section {
                Text("When do you want to wake up:")
                    .font(.headline)
                
                DatePicker("Please enter a time", selection: $wakeUp, displayedComponents:
                    .hourAndMinute)
                    .labelsHidden()
                }
                Section {
                Text("Desired amount of sleep:")
                    .font(.headline)
                
                Stepper("\(sleepAmount.formatted()) hours", value: $sleepAmount, in: 4...12, step: 0.25)
                }
                Section {
                    Text("Daily coffe intake:")
                        .font(.headline)
                    //changed Text() to Piker()
                    Picker("Daily coffe intake:", selection: $coffeeAmount) {
                        ForEach(coffeeCups, id: \.self) {
                            Text("\($0)")
                        }
                        // +1 Picker() examle:
//                        Text("1 cup").tag(0)
//                        Text("2 cups").tag(1)
//                        Text("3 cups").tag(2)
//                        Text("4 cups").tag(3)
                    }.pickerStyle(.segmented)
                }
                
                Section {
                    Text("You should go to sleep at:")
                        .font(.headline)
                    Text(calculateBedTime())
                        .font(Font.headline.weight(.bold))
                        .font(.title)
                        .frame(maxWidth: .infinity, alignment: .center)
                        .foregroundColor(Color(UIColor.systemRed))
                }
                // Stepper(coffeAmount == 1 ? "1 cup" : "\(coffeAmount) cups", value: $coffeAmount, in: 1...20)
                }
            .navigationTitle("Better rest")
//            .toolbar {
//                Button("Calculate my sleep time", action: calculateBedTime)
//            }
            .alert(alertTitle, isPresented: $showingAlert) {
                Button("OK") { }
            } message: {
                Text(alertMessage)
            }
        }
    }
    
    func calculateBedTime() -> String {
            let endView = SleepCalculator()

            let components = Calendar.current.dateComponents([.hour, .minute], from: wakeUp)
            let hour = (components.hour ?? 0) * 60 * 60
            let minute = (components.minute ?? 0) * 60

            do {
                let prediction = try endView.prediction(wake: Double(hour + minute), estimatedSleep: sleepAmount, coffee: Double(coffeeAmount))
                let sleepTime = wakeUp - prediction.actualSleep

                let formatter = DateFormatter()
                formatter.timeStyle = .short

                return formatter.string(from: sleepTime)
            } catch {
                return "Sorry, there was a problem calculating your bedtime."
            }
      }

    // 1st version:
//    func calculateBedTime() {
//        do {
//            let config = MLModelConfiguration()
//            let model = try SleepCalculator(configuration: config)
//            let components = Calendar.current.dateComponents([.hour, . minute], from: wakeUp)
//            let hour = (components.hour ?? 0) * 60 * 60
//            let minute = (components.minute ?? 0) * 60
//
//            let prediction = try model.prediction(wake: Double(hour + minute), estimatedSleep: sleepAmount, coffee: Double(coffeeAmount))
//
//            let sleepTime = wakeUp - prediction.actualSleep
//            alertTitle = "Your ideal bedtime is..."
//            alertMessage = sleepTime.formatted(date: .omitted, time: .shortened)
//
//        } catch {
//            alertTitle = "Error"
//            alertMessage = "Sorry, there was a problem calculating your bedtime."
//        }
//            showingAlert = true
//    }
//}
    struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
}
